{"version":3,"sources":["images/not_found.gif","components/Calendar/CalendarContainer.jsx","components/GridPictures/Picture/Picture.jsx","components/Preloader/Preloader.jsx","components/GridPictures/GridPictures.jsx","components/BigImage/BigImage.jsx","components/Content/Content.jsx","api/api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CalendarContainer","onActiveStartDateChange","onChange","value","className","Picture","img","setBigImage","scrollPosition","onClick","alt","title","effect","src","url","visibleByDefault","date","Preloader","trackWindowScroll","imgArray","pictures","filter","i","map","id","key","length","BigImage","isModal","e","target","xmlns","viewBox","d","delayTime","href","hdurl","download","Text","explanation","Content","useState","isShown","setIsShown","onMouseOver","onMouseOut","api_key","baseURL","getPicture","hd","fetch","then","response","json","App","initImgState","setImg","month","setMonth","setModal","bigImg","setBigImg","setModalImage","getDate","localStorage","getItem","Date","useEffect","queryOneImg","queryMonthImg","a","query","daysInMonth","getFullYear","getMonth","currentImg","currentDate","push","Promise","all","formatDate","day","year","defaultImages","removeItem","setItem","activeStartDate","view","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7db701eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/not_found.e9ff6ff5.gif\";","import React from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\n\nconst CalendarContainer = ({onActiveStartDateChange, onChange, value}) => {\n\n\n\n    return (\n        <div className='App-calendar'>\n            <Calendar\n                onChange={onChange}\n                value={value}\n                onActiveStartDateChange={onActiveStartDateChange}\n            />\n        </div>\n    );\n};\n\nexport default CalendarContainer;\n","import React from 'react';\r\nimport {LazyLoadComponent, LazyLoadImage} from 'react-lazy-load-image-component';\r\nimport 'react-lazy-load-image-component/src/effects/blur.css';\r\n\r\nconst Picture = ({img, setBigImage, scrollPosition}) => {\r\n\r\n    return (\r\n        <LazyLoadComponent>\r\n            <div className='item' onClick={() => setBigImage(img)}>\r\n                <LazyLoadImage alt={img.title}\r\n                               effect=\"blur\"\r\n                               src={img.url}\r\n                               scrollPosition={scrollPosition}\r\n                               visibleByDefault={true}/>\r\n                <p><b>{img.title}</b></p>\r\n                <p>{img.date}</p>\r\n            </div>\r\n        </LazyLoadComponent>)\r\n};\r\n\r\nexport default Picture;","import React from 'react';\r\nimport './Preloader.css';\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className='preloader'>\r\n            <div className=\"round\"/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Preloader;","import React from 'react';\r\nimport Picture from './Picture/Picture';\r\nimport Preloader from \"../Preloader/Preloader\";\r\nimport {trackWindowScroll} from 'react-lazy-load-image-component';\r\n\r\n\r\nconst GridPictures = ({imgArray, setBigImage, scrollPosition}) => {\r\n\r\n    let pictures = imgArray.filter(i => i.title)\r\n        .map((i, id) => <Picture key={id}\r\n                                 setBigImage={setBigImage}\r\n                                 scrollPosition={scrollPosition}\r\n                                 img={i}/>);\r\n\r\n    return (\r\n        <>\r\n            {imgArray.length === 0\r\n                ? <Preloader/>\r\n                : <div className='App-all-content'>\r\n                    {!imgArray ? '' : pictures}\r\n                </div>}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default trackWindowScroll(GridPictures);","import React from 'react';\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport 'react-lazy-load-image-component/src/effects/blur.css';\r\n\r\nconst BigImage = ({src, isModal, setBigImage}) => {\r\n    if (isModal) {\r\n\r\n        const onClickSetBigImage = (e) =>{\r\n            if(e.target.className === 'background-big-image')  setBigImage();\r\n        };\r\n\r\n        return (\r\n            <div className='background-big-image'\r\n                 key={src}\r\n                 onClick={onClickSetBigImage}>\r\n                <svg onClick={setBigImage} className='modal__cross' xmlns='http://www.w3.org/2000/svg'\r\n                     viewBox='0 0 24 24'>\r\n                    <path\r\n                        d='M23.954 21.03l-9.184-9.095 9.092-9.174-2.832-2.807-9.09 9.179-9.176-9.088-2.81 2.81 9.186 9.105-9.095 9.184 2.81 2.81 9.112-9.192 9.18 9.1z'/>\r\n                </svg>\r\n                <div className='big-image'>\r\n                    <LazyLoadImage\r\n                        effect=\"blur\"\r\n                        src={src.url}\r\n                        trackWindowScroll ={{delayTime:1000}}/>\r\n                    {/*<img src={src.hdurl} alt=''/>*/}\r\n                    <p>{src.title} [ {src.date} ]</p>\r\n                    <a href={src.hdurl} target='_blank' download>Скачать файл</a>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else return (<></>);\r\n};\r\n\r\nexport default BigImage;","import React, {useState} from 'react';\r\nimport Preloader from \"../Preloader/Preloader\";\r\n\r\nconst Content = ({img, setBigImage}) => {\r\n    const [isShown, setIsShown] = useState(false);\r\n\r\n    return (\r\n        <div className='App-content'>\r\n            <div className='Content-img'>\r\n                {img.hdurl === null\r\n                    ? <Preloader/>\r\n                    : <img onClick={() => setBigImage(img)}\r\n                           onMouseOver={() => setIsShown(true)}\r\n                           onMouseOut={() => setIsShown(false)}\r\n                           src={img.url}\r\n                           alt={img.title}\r\n                           title={!img.title ? '' : 'Нажмите для увеличения'}/>\r\n                }\r\n            </div>\r\n            {(!isShown && img.hdurl !== null) && (\r\n                <Text title={!img.title ? 'Данных нет' : img.title}\r\n                      date={!img.date ? 'Возможно дата еще не наступила или нет сохраненных данных' : img.date}\r\n                      explanation={!img.explanation ? '' : img.explanation}/>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Text = ({title, date, explanation}) => {\r\n    return (\r\n        <>\r\n            <span><b>{title}</b></span>\r\n            <p>{date}</p>\r\n            <p className='Explanation'>{explanation}</p>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Content;\r\n","const api_key = 'SaoJfZRzRAH13d01ZBCtcITtjs6ydPcNhxjK4O7c';\r\nconst baseURL = 'https://api.nasa.gov/planetary/apod';\r\n\r\nexport const getPicture = (date,hd = false) => {\r\n    let url = `${baseURL}?date=${date}&api_key=${api_key}&hd=${hd}`;\r\n    return fetch(url).then(response => response.json());\r\n};\r\n","import React, {useEffect, useState} from 'react';\nimport CalendarContainer from './components/Calendar/CalendarContainer';\nimport GridPictures from './components/GridPictures/GridPictures';\nimport BigImage from './components/BigImage/BigImage';\nimport Content from './components/Content/Content';\nimport defaultImages from './images/not_found.gif'\nimport {getPicture} from './api/api';\nimport 'react-calendar/dist/Calendar.css';\nimport './App.css';\n\n\nconst App = () => {\n\n    const initImgState = {\n        url: null,\n        hdurl: null,\n        title: 'Загрузка',\n        date: '',\n        explanation: ''\n    };\n\n    const [img, setImg] = useState(initImgState);\n    const [month, setMonth] = useState([]);\n    const [isModal, setModal] = useState(false);\n    const [bigImg, setBigImg] = useState(initImgState);\n\n    const setModalImage = () => {\n        isModal ? setModal(false) : setModal(true);\n    };\n\n    const getDate = () => {\n        return !localStorage.getItem('date')\n            ? new Date()\n            : new Date(localStorage.getItem('date'));\n    };\n\n    useEffect(() => {\n        queryOneImg(getDate());\n        queryMonthImg(getDate());\n    }, []);\n\n    const queryOneImg = async (value) => {\n        return setImg(await query(value));\n    };\n\n    const queryMonthImg = async (date = new Date()) => {\n        let daysInMonth = 32 - new Date(date.getFullYear(), date.getMonth(), 32).getDate();\n        let currentImg = [];\n        for (let i = 1; i <= daysInMonth; i++) {\n            let currentDate = new Date(date.getFullYear(), date.getMonth(), i);\n            currentImg.push(await query(currentDate));\n        }\n\n        Promise.all(currentImg).then(response =>setMonth(response));\n        return currentImg\n    };\n\n    const formatDate = (date) => {\n        const day = date.getDate();\n        const month = date.getMonth() + 1;\n        const year = date.getFullYear();\n\n        return `${year}-${month}-${day}`;\n    };\n\n    const query = async (value) => {\n        const response = await getPicture(formatDate(value));\n        let url = !response.url ? defaultImages : response.url;\n        return {\n            url: !response.hdurl ? defaultImages : url,\n            hdurl: !response.hdurl ? url : response.hdurl,\n            title: response.title,\n            date: response.date,\n            explanation: response.explanation\n        };\n    };\n\n    let onChange = (value) => {\n        setImg(initImgState);\n        const localDate = formatDate(value);\n        const currentDate = formatDate(new Date());\n\n        localDate === currentDate\n            ? localStorage.removeItem('date')\n            : localStorage.setItem('date', value);\n\n        queryOneImg(value);\n    };\n\n    const onActiveStartDateChange = ({activeStartDate, value, view}) => {\n        setMonth([]);\n        console.log(activeStartDate);\n        queryMonthImg(activeStartDate);\n    };\n\n    const setBigImage = (img) => {\n        setBigImg(img);\n        return setModalImage()\n    };\n\n    return (\n        <div className='App-wrapper'>\n            <CalendarContainer\n                onChange={onChange}\n                onActiveStartDateChange={onActiveStartDateChange}\n                value={getDate()}/>\n            <Content img={img} setBigImage={setBigImage}/>\n            <GridPictures imgArray={[...month]} setBigImage={setBigImage}/>\n            <BigImage src={bigImg} isModal={isModal} setBigImage={setModalImage}/>\n        </div>\n    )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}