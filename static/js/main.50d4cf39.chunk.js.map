{"version":3,"sources":["components/Calendar/CalendarContainer.jsx","components/GridPictures/Picture/Picture.jsx","components/GridPictures/GridPictures.jsx","components/BigImage/BigImage.jsx","components/Content/Content.jsx","api/api.js","App.js","serviceWorker.js","index.js","images/not_found.gif"],"names":["CalendarContainer","onActiveStartDateChange","onChange","value","className","Picture","src","title","date","alt","GridPictures","imgArray","pictures","filter","i","map","id","key","url","BigImage","isModal","setBigImage","onClick","xmlns","viewBox","d","Content","img","hdurl","api_key","baseURL","getPicture","hd","fetch","then","response","json","App","useState","setImg","month","setMonth","setModal","getDate","localStorage","getItem","Date","useEffect","queryOneImg","queryMonthImg","a","query","daysInMonth","getFullYear","getMonth","currentImg","currentDate","push","Promise","all","formatDate","day","year","defaultImages","removeItem","setItem","activeStartDate","view","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.50d4cf39.chunk.js","sourcesContent":["import React from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\n\nconst CalendarContainer = ({onActiveStartDateChange, onChange, value}) => {\n\n\n\n    return (\n        <div className='App-calendar'>\n            <Calendar\n                onChange={onChange}\n                value={value}\n                onActiveStartDateChange={onActiveStartDateChange}\n            />\n        </div>\n    );\n};\n\nexport default CalendarContainer;\n","import React from 'react';\r\n\r\n\r\nconst Picture = ({src, title,date}) => {\r\n    return (\r\n        <div className='item'>\r\n            <img src={src} alt={title} title={title}/>\r\n            <p>{title}</p>\r\n            <p>{date}</p>\r\n        </div>)\r\n\r\n};\r\n\r\nexport default Picture;","import React from 'react';\r\nimport Picture from './Picture/Picture';\r\n\r\n\r\nconst GridPictures = ({imgArray}) => {\r\n\r\n    let pictures = imgArray.filter(i => i.title).map((i,id) => <Picture key={id}\r\n                                                                        src={i.url}\r\n                                                                        date={i.date}\r\n                                                                        title={i.title}/>);\r\n\r\n    return (\r\n        <div className='App-all-content'>\r\n            {!imgArray ? '' : pictures}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default GridPictures;","import React from 'react';\r\n\r\n\r\nconst BigImage = ({src, isModal, setBigImage}) => {\r\n    if (isModal) {\r\n        return (\r\n            <div className='big-image' key={src}>\r\n                <svg onClick={setBigImage} className='modal__cross' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'>\r\n                    <path\r\n                        d='M23.954 21.03l-9.184-9.095 9.092-9.174-2.832-2.807-9.09 9.179-9.176-9.088-2.81 2.81 9.186 9.105-9.095 9.184 2.81 2.81 9.112-9.192 9.18 9.1z'/>\r\n                </svg>\r\n                <img src={src} alt=''/>\r\n            </div>\r\n        )\r\n    } else return (<></>);\r\n\r\n\r\n};\r\n\r\nexport default BigImage;","import React from 'react';\r\n\r\nconst Content = ({img, setBigImage}) => {\r\n\r\n    return (\r\n        <div className='App-content'>\r\n            <img onClick={setBigImage}\r\n                 src={img.hdurl}\r\n                 alt={img.title}\r\n                 title={!img.title ? '' : 'Нажмите для увеличения'}/>\r\n\r\n            <span><b>{!img.title ? 'Данных нет' : img.title}</b></span>\r\n            <p>{!img.date ? 'Возможно дата еще не наступила или нет сохраненных данных' : img.date}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Content;\r\n","const api_key = 'SaoJfZRzRAH13d01ZBCtcITtjs6ydPcNhxjK4O7c';\r\nconst baseURL = 'https://api.nasa.gov/planetary/apod';\r\n\r\nexport const getPicture = (date,hd = false) => {\r\n    let url = `${baseURL}?date=${date}&api_key=${api_key}&hd=${hd}`;\r\n    return fetch(url).then(response => response.json());\r\n};\r\n","import React, {useEffect, useState} from 'react';\nimport CalendarContainer from './components/Calendar/CalendarContainer';\nimport GridPictures from './components/GridPictures/GridPictures';\nimport BigImage from './components/BigImage/BigImage';\nimport Content from './components/Content/Content';\nimport defaultImages from './images/not_found.gif'\nimport {getPicture} from './api/api';\nimport 'react-calendar/dist/Calendar.css';\nimport './App.css';\n\n\nconst App = () => {\n    const [img, setImg] = useState({});\n    const [month, setMonth] = useState([]);\n    const [isModal, setModal] = useState(false);\n\n    const setBigImage = () => {\n        isModal ? setModal(false) : setModal(true);\n    };\n\n    const getDate = () => {\n        return !localStorage.getItem('date')\n            ? new Date()\n            : new Date(localStorage.getItem('date'));\n    };\n\n    useEffect(() => {\n        queryOneImg(getDate());\n        queryMonthImg();\n    }, []);\n\n    const queryOneImg = async (value) => {\n        return setImg(await query(value));\n    };\n\n    const queryMonthImg = async (date = new Date()) => {\n        let daysInMonth = 32 - new Date(date.getFullYear(), date.getMonth(), 32).getDate();\n        let currentImg = [];\n        for (let i = 1; i <= daysInMonth; i++) {\n            let currentDate = new Date(date.getFullYear(), date.getMonth(), i);\n            currentImg.push(await query(currentDate));\n        }\n\n        Promise.all(currentImg).then(response => setMonth(response));\n        return currentImg\n    };\n\n    const formatDate = (date) => {\n        const day = date.getDate();\n        const month = date.getMonth() + 1;\n        const year = date.getFullYear();\n\n        return `${year}-${month}-${day}`;\n    };\n\n    const query = async (value) => {\n\n        const response = await getPicture(formatDate(value));\n\n        let url = !response.url ? defaultImages : response.hdurl;\n\n        return {\n            url: !response.hdurl ? defaultImages : url,\n            hdurl: !response.hdurl ? defaultImages : response.hdurl,\n            title: response.title,\n            date: response.date\n        };\n    };\n\n    let onChange = (value) => {\n        const localDate = formatDate(value);\n        const currentDate = formatDate(new Date());\n\n        localDate === currentDate\n            ? localStorage.removeItem('date')\n            : localStorage.setItem('date', value);\n\n        queryOneImg(value);\n    };\n\n    const onActiveStartDateChange = ({activeStartDate, value, view}) => {\n        queryMonthImg(activeStartDate);\n    };\n\n    return (\n        <div className='App-wrapper'>\n            <CalendarContainer\n                onChange={onChange}\n                onActiveStartDateChange={onActiveStartDateChange}\n                value={getDate()}/>\n            <Content img={img} setBigImage={setBigImage}/>\n            <GridPictures imgArray={[...month]}/>\n            <BigImage src={img.hdurl} isModal={isModal} setBigImage={setBigImage}/>\n        </div>\n    )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/not_found.e9ff6ff5.gif\";"],"sourceRoot":""}